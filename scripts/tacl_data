#!/bin env python

"""API client for data uploads."""

import sys
import click

from tsdapiclient.authapi import get_jwt_tsd_auth
from tsdapiclient.config import ENV
from tsdapiclient.configurer import read_config
from tsdapiclient.fileapi import streamfile, streamstdin, export_list, export_get
from tsdapiclient.tools import _check_present


def print_data_guide():
    guide_text = """\

        TSD API client command-line tool: tacl
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        Usage: tacl [OPTIONS]

        Options
        ~~~~~~~

        --env           Either 'test' or 'prod' environment. Defaults to 'prod'.
        --import        Path to file or folder you want to upload.
        --export-list   List files available for export.
        --export        Name of the file you want to download.

        Optional data pipeline parameters (not relevant to resume or sync):
        --pre           Comma-separated string specifying pre-upload data processing:
                            - 'archive': create a tarball
                            - 'compress': use gzip compression
                            - 'encrypt': encrypt data using AES
        --post          Comma-separated string specifying post-upload data processing (server-side):
                            - 'restore': restore the tarball to a directory
                            - 'decompress': decompress data
                            - 'decrypt': decrypt data
        --recipient     GPG recipient - only when using 'encrypt' or 'decrypt' in pre and/or post
                        expression.
        --group         Name of the TSD file group which should have permissions on the upload.


        Examples: Importing data to TSD in production
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        # make sure you register with TSD
        tacl --register
        # choose 'prod'

        # upload a file
        tacl --import example.tar.gz

        # upload a file, limit group access upon storage
        tacl --import example.tar.gz --group p11-restricted-group

        # upload a file, decompress and restore server-side
        tacl --import example.tar.gz --post 'restore,decompress'

        # upload a file, compress on-the-fly, decompress server-side
        tacl --import myfile --pre 'compress' --post 'decompress'

        # upload a directory, tar.gz on-the-fly
        tacl --import mydir --pre 'archive,compress'

        # upload a directory, tar.gz on-the-fly, decompress and restore server-side
        tacl --import mydir --pre 'archive,compress' --post 'restore,decompress'

        # list files available for export
        tacl --export-list

        # export a zip file
        tacl --export mydir.zip

        API docs
        ~~~~~~~~
        test.api.tsd.usit.no/v1/docs/tsd-api-integration.html

    """
    print guide_text

def parse_post_processing_expression(expr, encryptedpw):
    """
    Map expressions to custom headers.

    Params
    ------
    expr: str
        e.g. 'restore,decompress,decrypt'
    encryptedpw: str
        base64 encoded, gpg encrypted, AES secrek key

    Returns
    -------
    dict

    """
    if expr == 'none':
        return {'Content-Type': 'application/octet-stream'}
    elif expr == 'decrypt':
        return {'Content-Type': 'application/aes',
                'Aes-Key': encryptedpw}
    elif expr == 'decompress':
        return {'Content-Type': 'application/gz'}
    elif 'decompress' in expr and 'decrypt' in expr:
        return {'Content-Type': 'application/gz.aes',
                'Aes-Key': encryptedpw}
    elif expr == 'restore':
        return {'Content-Type': 'application/tar'}
    elif 'restore' in expr and 'decompress' in expr and 'decrypt' in expr:
        return {'Content-Type': 'application/tar.gz.aes',
                'Aes-Key': encryptedpw}
    elif 'restore' in expr and 'decrypt' in expr:
        return {'Content-Type': 'application/tar.aes',
                'Aes-Key': encryptedpw}
    elif 'restore' in expr and 'decompress' in expr:
        return {'Content-Type': 'application/tar.gz'}
    else:
        print 'expression not parseable'
        raise Exception


@click.command()
@click.option('--env', default='test', help='which environment you want to interact with')
@click.option('--pnum', default=None, help='project numbers')
@click.option('--config', default=None, help='path to config file')
@click.option('--guide', is_flag=True, default=False, required=False, help='print help text')
@click.option('--data', default=None, required=False, help='path to file')
@click.option('--user_name', default=None, help='TSD project user name')
@click.option('--password', default=None, help='TSD password')
@click.option('--otp', default=None, help='one time passcode')
@click.option('--encryptedpw', default=None, required=False, help='encrypted password used in symmetric data encryption')
@click.option('--pre', default=None, required=False, help='pre processing expression')
@click.option('--post', default='none', required=False, help='post processing expression')
@click.option('--tsd_api_key', is_flag=True, default=False, help='use project specific TSD api key')
@click.option('--group', default=None, required=False, help='which group should have permission on upload')
@click.option('--show', is_flag=True, default=None, required=False, help='list files available for export')
@click.option('--export', default=None, required=False, help='download a file')
@click.argument('fileinput', type=click.File('rb'), required=False, default=None)
def main(env, pnum, config, guide, data, user_name,
         password, otp, encryptedpw, pre, post, tsd_api_key, group,
         show, export, fileinput):
    if guide:
        print_data_guide()
        return
    if env not in ['test', 'prod']:
        print 'unknown env'
        sys.exit(1)
    _check_present(env, 'env')
    _check_present(pnum, 'pnum')
    if data or show or export:
        _check_present(user_name, 'user_name')
        _check_present(password, 'password')
        _check_present(otp, 'otp')
        if not group:
            group = pnum + '-member-group'
        try:
            custom_headers = parse_post_processing_expression(post, encryptedpw)
        except Exception:
            print 'Cannot proceed - unclear data pipeline specification'
            return
        try:
            # tacl_data prefers an api_key found in .tacl_config
            # by default there is nothing there, and tacl is
            # able to upload data with TSD 2FA, using API keys
            # stored in code. If .tacl_config does not contain
            # keys, then those distributed with the application
            # are used
            if tsd_api_key:
                api_key = read_config()[env][pnum]
            else:
                try:
                    api_key = read_config()[env]['api_key']
                except Exception as e:
                    print 'could not find an api key'
                    return
            if data or fileinput:
                token_type = 'import'
            elif show or export:
                token_type = 'export'
            token = get_jwt_tsd_auth(env, pnum, api_key, user_name, password, otp, token_type)
        except Exception:
            print 'Authentication failed'
            return
        if token:
            if not fileinput and data:
                resp = streamfile(env, pnum, data, token,
                                  custom_headers=custom_headers, group=group)
                if resp.status_code == 201:
                    print 'Data imported'
                else:
                    print 'Data import failed: ', resp.text
            elif fileinput:
                resp = streamstdin(env, pnum, fileinput, data, token,
                                   custom_headers=custom_headers, group=group)
                if resp.status_code == 201:
                    print 'Data imported'
                else:
                    print 'Data import failed: ', resp.text
            elif show:
                export_list(env, pnum, token)
                return
            elif export:
                filename = export
                export_get(env, pnum, filename, token)
                return
            return
        else:
            print 'Authentication failed'
            return
    else:
        print 'Didn\'t do anything - missing input?'
        return

if __name__ == '__main__':
    main()
