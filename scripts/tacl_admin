#!/bin env python3

"""API client for admin."""

import sys
import getpass

import click
import requests

from tsdapiclient.administrator import do_signup, do_confirm, \
        get_api_key, del_api_key, pw_reset, get_tsd_api_key
from tsdapiclient.client_config import ENV
from tsdapiclient.configurer import read_config, update_config, print_config, \
                                    print_config_tsd_2fa_key
from tsdapiclient.tools import _check_present, user_agent

requests.utils.default_user_agent = user_agent

def print_admin_guide():
    guide_text = """\

        tacl admin
        ~~~~~~~~~~

        If you want to interact with the test API add: '--env test' to
        your command.

        By default, tacl can be used with TSD credentials in an interactive
        way.

        1. Register a 3rd-party app with the API
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        tacl --pnum p11 --signup --client_name '<name>' --email '<email>'
        # email tsd-drift@usit.uio.no, asking for your confirmation token
        tacl --pnum p11 --confirm <confirmation_token>
        # email tsd-drift@usit.uio.no, asking for verification
        tacl --pnum p11 --getapikey

        To view your credentials do: tacl --show_config

        2. Register yourself with the API using TSD 2FA
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        tacl_admin --register_tsd_2fa
        # you will be prompted for you credentials
        # a project specific API key will be stored in the config

        3. Manage your config
        ~~~~~~~~~~~~~~~~~~~~~
        tacl --pnum p11 --delapikey <key>
        tacl --pnum p11 --pwreset
        tacl --show_config
        tacl --del_config
        tacl_admin --env test --pnum p11 --print_tsd_2fa_key

        3. API docs
        ~~~~~~~~~~~
        test.api.tsd.usit.no/v1/docs/tsd-api-integration.html

    """
    print(guide_text)


@click.command()
@click.option('--env', default='prod', help='which environment you want to interact with')
@click.option('--pnum', default=None, help='project numbers')
@click.option('--signup', is_flag=True, default=False, help='register an API client')
@click.option('--confirm', default=None, help='confirmation token')
@click.option('--getapikey', is_flag=True, default=False, help='get a persistent API key')
@click.option('--delapikey', default=False, help='revoke an API key')
@click.option('--pwreset', is_flag=True, default=False, help='reset your password')
@click.option('--guide', is_flag=True, default=False, help='print help text')
@click.option('--client_name', default=None, help='your client\'s name')
@click.option('--email', default=None, help='your email address')
@click.option('--show-config', is_flag=True, help='print current tacl config')
@click.option('--del-config', is_flag=True, help='delete current tacl config')
@click.option('--register_tsd_2fa', is_flag=True, help='one-step API key request - valid for TSD 2FA')
@click.option('--print_tsd_2fa_key', is_flag=True, help='print project specific TSD 2FA api key')
def main(env, pnum, signup, confirm, getapikey, delapikey, pwreset, guide,
         client_name, email, show_config, del_config, register_tsd_2fa,
         print_tsd_2fa_key):
    if guide:
        print_admin_guide()
        return
    if show_config:
        print_config()
        return
    if del_config:
        delete_config()
        return
    if env not in ['test', 'prod', 'alt']:
        print('unknown env')
        sys.exit(1)
    _check_present(env, 'env')
    if register_tsd_2fa:
        choice = input(
            """Choose the API environment by typing one of the following numbers:\n1 - for normal production usage\n2 - for use over fx03 network\n3 - for testing > """)
        if choice not in '123':
            print('Invalid choice for API environment')
            sys.exit(1)
        choices = {'1': 'prod', '2': 'alt', '3': 'test'}
        env = choices[choice]
        user_name = input('username > ')
        password = getpass.getpass('password > ')
        otp = input('otp > ')
        pnum = user_name.split('-')[0]
        key = get_tsd_api_key(env, pnum, user_name, password, otp)
        update_config(env, pnum, key)
        print('Successfully registered for project: {0}, and API environment hosted at {1}'.format(pnum, ENV[env]))
        return
    _check_present(pnum, 'pnum')
    if print_tsd_2fa_key:
        print_config_tsd_2fa_key(env, pnum)
        return
    if signup:
        _check_present(client_name, 'client_name')
        _check_present(email, 'email')
        resp = do_signup(env, pnum, client_name, email)
        if not resp:
            print('Error in signup')
            return
        update_config(env, 'client_name', client_name)
        update_config(env, 'email', email)
        update_config(env, 'client_id', resp['client_id'])
        print('client registered with client_id: {0}'.format(resp['client_id']))
        return
    if confirm is not None:
        conf = read_config()[env]
        resp = do_confirm(env, pnum, conf['client_id'], confirm)
        if not resp:
            print('Error in confirmation')
            return
        update_config(env, 'pass', resp['pass'])
        print('client confirmed, password stored in tacl config')
        return
    if getapikey:
        conf = read_config()[env]
        resp = get_api_key(env, pnum, conf['client_id'], conf['pass'])
        if not resp:
            print('Error getting API key')
            return
        update_config(env, 'api_key', resp['api_key'])
        print('API key stored in config')
        return
    if delapikey:
        conf = read_config()[env]
        resp = del_api_key(env, pnum, conf['client_id'], conf['pass'], delapikey)
        # TODO inspect response
        print('API key deleted')
        return
    if pwreset:
        conf = read_config()[env]
        resp = pw_reset(env, pnum, conf['client_id'], conf['pass'])
        if not resp:
            print('Error in password reset')
            return
        update_config(env, 'pass', resp['pass'])
        print('new password stored in tacl config')
        return


if __name__ == '__main__':
    main()
